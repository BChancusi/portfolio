{"version":3,"sources":["Project.js","App.js","serviceWorker.js","index.js"],"names":["Projects","react_default","a","createElement","Fragment","href","src","alt","height","width","App","className","Project","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA8CeA,MA3Cf,WACI,OACIC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACIH,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,4CAAR,QACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,4CAAR,WAEAJ,EAAAC,EAAAC,cAAA,sIAIAF,EAAAC,EAAAC,cAAA,4DAEAF,EAAAC,EAAAC,cAAA,OAAKG,IAAI,kCAAkCC,IAAI,iBAAiBC,OAAO,MAAMC,MAAM,SAEvFR,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,gCAEAF,EAAAC,EAAAC,cAAA,0GAEAF,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,8EAEJF,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,mGAGAF,EAAAC,EAAAC,cAAA,wDAGAF,EAAAC,EAAAC,cAAA,sFCVLO,MAvBf,WACI,OACIT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACXV,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cACdV,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,yCAIRF,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACS,EAAD,OAEJX,EAAAC,EAAAC,cAAA,UAAQQ,UAAU,cACdV,EAAAC,EAAAC,cAAA,KAAGE,KAAK,2DAAR,YACAJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gCAAR,UACAJ,EAAAC,EAAAC,cAAA,yCCRIU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e65a288d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nfunction Projects() {\r\n    return (\r\n        <>\r\n            <article>\r\n                <h4>Distributed Budgeting System</h4>\r\n                <a href=\"https://github.com/BChancusi/distributed\">Code</a>\r\n                <a href=\"https://hidden-basin-52987.herokuapp.com\">Website</a>\r\n\r\n                <p>Web application designed to allow multiple users to input financial data\r\n                    concurrently leveraging branches and committing.\r\n                </p>\r\n\r\n                <p>Developed using React.js, Express.js and MySQL.</p>\r\n\r\n                <img src=\"https://i.imgur.com/8qfyiT0.png\" alt=\"DBS Demo Image\" height=\"200\" width=\"400\"/>\r\n            </article>\r\n            <article>\r\n                <h4>Social application</h4>\r\n\r\n                <p>Social web appliction allowing users to create posts/comment and create a paid subscription. </p>\r\n\r\n                <p>Developed using Vue.js, Firebase, HTML and CSS.</p>\r\n                <p>Project managed on GitHub with contributions from group members.</p>\r\n            </article>\r\n            <article>\r\n                <h4>SpotFX</h4>\r\n                <ul>\r\n                    <li>\r\n                        Hackathon created project with six contributors designed to visualise Spotify tracks.\r\n                    </li>\r\n                    <li>\r\n                        Developed using HTML, JQuery and three.js.\r\n                    </li>\r\n                    <li>\r\n                        In charge of interacting with the Spotify API and managing requests.\r\n                    </li>\r\n                </ul>\r\n            </article>\r\n        </>\r\n\r\n    );\r\n}\r\n\r\nexport default Projects;","import React from 'react';\nimport './App.css';\nimport Projects from './Project';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <header>\n                    <h1>Brandon Chancusi</h1>\n                    <h2>brandonchancusi@gmail.com</h2>\n                </header>\n\n            </header>\n            <section>\n                <h3>Projects</h3>\n                <Projects/>\n            </section>\n            <footer className=\"App-header\">\n                <a href=\"https://www.linkedin.com/in/brandon-chancusi-217559172/\">Linkedin</a>\n                <a href=\"https://github.com/BChancusi\">Github</a>\n                <p>brandonchancusi@gmail.com</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}