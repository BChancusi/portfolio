{"version":3,"sources":["Project.js","Skills.js","App.js","serviceWorker.js","index.js"],"names":["Projects","className","src","alt","href","target","rel","Skills","App","title","Project","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAyGeA,MAvGf,WACI,OACI,iCACI,wCACA,yBAAKC,UAAU,YAEX,6BAASA,UAAW,QAChB,gDACA,0HAGA,iHAGA,sGAGA,iGAGA,yBAAKA,UAAW,SACZ,yBAAKA,UAAW,eAAgBC,IAAK,kBAAmBC,IAAI,eAC5D,yBAAKF,UAAW,eAAgBC,IAAK,mBAAoBC,IAAI,iBAC7D,yBAAKF,UAAW,eAAgBC,IAAK,kBAAmBC,IAAI,gBAEhE,uBAAGF,UAAW,MAAOG,KAAK,gDAAgDC,OAAO,SAC9EC,IAAI,uBADP,SAIJ,iCACI,4DACA,6OAKA,sTAOA,yBAAKL,UAAW,gBAAiBC,IAAI,kCAAkCC,IAAI,aAE3E,yBAAKF,UAAW,SACZ,yBAAKA,UAAW,eAAgBC,IAAK,kBAAmBC,IAAI,eAC5D,yBAAKF,UAAW,eAAgBC,IAAK,mBAAoBC,IAAI,gBAC7D,yBAAKF,UAAW,eAAgBC,IAAK,kBAAmBC,IAAI,eAC5D,yBAAKF,UAAW,eAAgBC,IAAK,mBAAoBC,IAAI,gBAC7D,yBAAKF,UAAW,eAAgBC,IAAK,iBAAkBC,IAAI,eAE/D,6BACI,uBAAGF,UAAW,MAAOG,KAAK,2CACvBC,OAAO,SAASC,IAAI,uBADvB,QAEA,uBAAGL,UAAW,MAAOG,KAAK,+CACvBC,OAAO,SAASC,IAAI,uBADvB,aAKR,6BAASL,UAAW,QAChB,0CAEA,6HAEA,8EACA,iGAGJ,iCACI,yCACA,sGAGA,yBAAKA,UAAW,gBAAiBC,IAAK,+BAAgCC,IAAI,mBAC1E,yBAAKF,UAAW,SACZ,yBAAKA,UAAW,eAAgBC,IAAK,kBAAmBC,IAAI,gBAEhE,6BACI,uBAAGF,UAAW,MAAOG,KAAK,yCAAyCC,OAAO,SACvEC,IAAI,uBADP,UAMR,6BAASL,UAAW,QAChB,sCACA,oHAGA,yEAGA,uGCxELM,MArBf,WACI,OACI,iCACI,sCACA,iCACI,+HAGA,yCACA,4FAGA,wCACA,iGCWDC,MArBf,WACI,OACI,yBAAKP,UAAU,OACX,4BAAQA,UAAU,cACd,gDACA,yBAAKA,UAAW,aACZ,uBAAGG,KAAK,+BAAgCC,OAAO,SAASC,IAAI,uBACxD,yBAAKJ,IAAK,mBAAoBC,IAAI,cAAcM,MAAO,YAE3D,uBAAGL,KAAK,yDAA0DC,OAAO,SACtEC,IAAI,uBACH,yBAAKJ,IAAK,qBAAsBC,IAAI,gBAAgBM,MAAO,gBAIvE,kBAAC,EAAD,MACA,kBAACC,EAAD,QCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0f373623.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Projects() {\r\n    return (\r\n        <section>\r\n            <h2>Projects</h2>\r\n            <div className=\"Projects\">\r\n\r\n                <article className={\"Grey\"}>\r\n                    <h3>Book application</h3>\r\n                    <p>\r\n                        Book application designed to allow users to create, view and post comments on listed books.\r\n                    </p>\r\n                    <p>\r\n                        Authenticated users providing personal accounts enabling commenting functionality.\r\n                    </p>\r\n                    <p>\r\n                        Restricted access to protected REST API endpoints if not authenticated.\r\n                    </p>\r\n                    <p>\r\n                        Developed using React.js, Node.js, Express.js MySQL, HTML and CSS.\r\n                    </p>\r\n                    <div className={\"Logos\"}>\r\n                        <img className={\"Project-logo\"} src={\"logos/React.png\"} alt=\"React Logo\"/>\r\n                        <img className={\"Project-logo\"} src={\"logos/NodeJS.png\"} alt=\"Node.js Logo\"/>\r\n                        <img className={\"Project-logo\"} src={\"logos/MySQL.png\"} alt=\"MySQL Logo\"/>\r\n                    </div>\r\n                    <a className={\"Btn\"} href=\"https://github.com/BChancusi/book-application\" target=\"_blank\"\r\n                       rel=\"noopener noreferrer\" >Code</a>\r\n                </article>\r\n\r\n                <article>\r\n                    <h3>Distributed Budgeting System</h3>\r\n                    <p>\r\n                        Single page web application allowing users to manage finances using a\r\n                        version control system. Created for a client to resolve the issue of multiple users\r\n                        making changes by providing a consolidated platform.\r\n                    </p>\r\n                    <p>\r\n                        This project is built using React.js, with a Express.js backend for handling API\r\n                        requests, deployed to Heroku. MySQL provides the database solution with HTML5 and CSS\r\n                        used for elements and design. Critical components are tested using Jest\r\n                        ensuring components function as desired.\r\n                    </p>\r\n\r\n                    <img className={\"Project-image\"} src=\"https://i.imgur.com/8qfyiT0.png\" alt=\"DBS Demo\"/>\r\n\r\n                    <div className={\"Logos\"}>\r\n                        <img className={\"Project-logo\"} src={\"logos/React.png\"} alt=\"React Logo\"/>\r\n                        <img className={\"Project-logo\"} src={\"logos/NodeJS.png\"} alt=\"NodeJS Logo\"/>\r\n                        <img className={\"Project-logo\"} src={\"logos/MySQL.png\"} alt=\"MySQL Logo\"/>\r\n                        <img className={\"Project-logo\"} src={\"logos/Heroku.png\"} alt=\"Heroku Logo\"/>\r\n                        <img className={\"Project-logo\"} src={\"logos/Jest.png\"} alt=\"Jest Logo\"/>\r\n                    </div>\r\n                    <div>\r\n                        <a className={\"Btn\"} href=\"https://github.com/BChancusi/distributed\"\r\n                           target=\"_blank\" rel=\"noopener noreferrer\" >Code</a>\r\n                        <a className={\"Btn\"} href=\"https://distributed-budgeting.herokuapp.com/\"\r\n                           target=\"_blank\" rel=\"noopener noreferrer\" >Project</a>\r\n                    </div>\r\n                </article>\r\n\r\n                <article className={\"Grey\"}>\r\n                    <h3>SocialFans</h3>\r\n\r\n                    <p>Social web application allowing users to create posts, comment and create a paid\r\n                        subscription.</p>\r\n                    <p>Developed using Vue.js, Firebase, HTML and CSS.</p>\r\n                    <p>Project managed on GitHub with contributions from group members. </p>\r\n                </article>\r\n\r\n                <article>\r\n                    <h3>Portfolio</h3>\r\n                    <p>\r\n                        Personal portfolio designed using React and deployed onto GitHub Pages.\r\n                    </p>\r\n                    <img className={\"Project-image\"} src={\"project-images/portfolio.png\"} alt=\"Portfolio Demo\"/>\r\n                    <div className={\"Logos\"}>\r\n                        <img className={\"Project-logo\"} src={\"logos/React.png\"} alt=\"React Logo\"/>\r\n                    </div>\r\n                    <div>\r\n                        <a className={\"Btn\"} href=\"https://github.com/BChancusi/portfolio\" target=\"_blank\"\r\n                           rel=\"noopener noreferrer\">Code</a>\r\n                    </div>\r\n\r\n                </article>\r\n\r\n                <article className={\"Grey\"}>\r\n                    <h3>SpotFX</h3>\r\n                    <p>\r\n                        Hackathon created project with six contributors designed to visualise Spotify tracks.\r\n                    </p>\r\n                    <p>\r\n                        Developed using HTML, JQuery and three.js.\r\n                    </p>\r\n                    <p>\r\n                        In charge of interacting with the Spotify API and managing requests.\r\n                    </p>\r\n                </article>\r\n            </div>\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\nexport default Projects;","import React from 'react';\r\n\r\nfunction Skills() {\r\n    return (\r\n        <section>\r\n            <h2>Skills</h2>\r\n            <article>\r\n                <p>\r\n                    Test-driven development (TDD) – Agile software development – Amazon Web Services (AWS)\r\n                </p>\r\n                <h3>Front-end</h3>\r\n                <p>\r\n                    JavaScript – React.js – Jest – HTML – CSS\r\n                </p>\r\n                <h3>Back-end</h3>\r\n                <p>\r\n                    Java – Node.js – Express.js – JUnit – MySQL\r\n                </p>\r\n            </article>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Skills;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Projects from './Project';\r\nimport Skills from './Skills';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h1>Brandon Chancusi</h1>\r\n                <div className={\"App-links\"}>\r\n                    <a href=\"https://github.com/BChancusi\"  target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src={\"logos/GitHub.png\"} alt=\"GitHub Logo\" title={\"GitHub\"}/>\r\n                    </a>\r\n                    <a href=\"https://www.linkedin.com/in/brandon-chancusi-217559172\"  target=\"_blank\"\r\n                       rel=\"noopener noreferrer\">\r\n                        <img src={\"logos/LinkedIn.png\"} alt=\"LinkedIn Logo\" title={\"LinkedIn\"}/>\r\n                    </a>\r\n                </div>\r\n            </header>\r\n            <Skills/>\r\n            <Projects/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n//TODO make header stick\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}